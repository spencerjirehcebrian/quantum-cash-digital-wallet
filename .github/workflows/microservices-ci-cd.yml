name: Microservices CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  BASE_IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service: [account-service, user-service]
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'
    
    - name: Build with Maven
      run: mvn clean package -f ${{ matrix.service }}/pom.xml
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    
    - name: Log in to the Container registry
      uses: docker/login-action@v1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: ./${{ matrix.service }}
        file: ./${{ matrix.service }}/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-${{ matrix.service }}:${{ github.sha }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: self-hosted
    strategy:
      matrix:
        service: [user-service, account-service]
    steps:
    - uses: actions/checkout@v2

    - name: Create Kubernetes Secrets
      run: |
        mkdir -p /mnt/wsl/data/postgres

        # Create secrets in the quantum-cash namespace
        kubectl create namespace quantum-cash --dry-run=client -o yaml | kubectl apply -f -

        kubectl create secret generic springboot-env-secret \
          --from-literal=JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }} \
          --from-literal=JWT_SECRET=${{ secrets.JWT_SECRET }} \
          --dry-run=client -o yaml | kubectl apply -f - -n quantum-cash

        kubectl create secret generic postgres-secret \
          --from-literal=postgres-user=${{ secrets.POSTGRES_USER }} \
          --from-literal=postgres-password=${{ secrets.POSTGRES_PASSWORD }} \
          --dry-run=client -o yaml | kubectl apply -f - -n quantum-cash

    - name: Apply filebeat configmap
      run: |
        kubectl apply -f shared/kubernetes/filebeat-configmap.yaml -n quantum-cash

    - name: Deploy PostgreSQL
      run: |
        kubectl apply -f shared/kubernetes/manual-storageclass.yaml -n quantum-cash
        kubectl apply -f shared/kubernetes/postgres-pv.yaml -n quantum-cash
        kubectl apply -f shared/kubernetes/postgres-deployment.yaml -n quantum-cash
        kubectl apply -f shared/kubernetes/postgres-service.yaml -n quantum-cash

    - name: Create Flyway migrations ConfigMap
      run: |
        echo "Creating ConfigMap for ${{ matrix.service }}"
        ls -R ${{ matrix.service }}/src/main/resources/db/migration/
        kubectl create configmap ${{ matrix.service }}-flyway-migrations \
          --from-file=${{ matrix.service }}/src/main/resources/db/migration/ \
          -o yaml --dry-run=client | kubectl apply -f - -n quantum-cash
        echo "ConfigMap created. Listing ConfigMaps:"
        kubectl get configmaps -n quantum-cash

    - name: Deploy to local Kubernetes
      run: |
        # Ensure namespace exists
        kubectl create namespace quantum-cash --dry-run=client -o yaml | kubectl apply -f -
        
        # Apply the service and deployment YAML in the quantum-cash namespace
        kubectl apply -f ${{ matrix.service }}/kubernetes/deployment.yaml -n quantum-cash
        kubectl apply -f ${{ matrix.service }}/kubernetes/service.yaml -n quantum-cash
        
        # Update the deployment with the new image in the quantum-cash namespace
        kubectl set image deployment/${{ matrix.service }} ${{ matrix.service }}=${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-${{ matrix.service }}:${{ github.sha }} -n quantum-cash
        
        # Check pod status
        echo "Deployment applied. Checking pod status:"
        kubectl get pods -n quantum-cash
        
        # Describe the deployment in the quantum-cash namespace
        echo "Describing the deployment:"
        kubectl describe deployment ${{ matrix.service }} -n quantum-cash

    - name: Check for errors
      if: failure()
      run: |
        echo "Deployment failed. Checking logs:"
        kubectl logs deployment/${{ matrix.service }} --all-containers=true -n quantum-cash
        echo "Describing pods:"
        kubectl describe pods -l app=${{ matrix.service }} -n quantum-cash
